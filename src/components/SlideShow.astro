---
import Icon from "astro-icon";

export interface Props {
  slides: {
    img: string;
    imgAlt: string;
    text: string;
  }[];
}

const props = Astro.props;
---

<div class="slideshow-container relative mx-auto mb-12 mt-20">
  {
    props.slides.map((slide, index) => (
      <div
        class:list={["mySlides fade hidden", index === 0 ? "active-slide" : ""]}
      >
        <img src={slide.img} alt={slide.imgAlt} />
        <div class="flex w-full justify-between">
          <div>
            {index + 1} / {props.slides.length}
          </div>
          <div>{slide.text}</div>
        </div>
      </div>
    ))
  }

  <div class="flex justify-center gap-1">
    {
      props.slides.map((s, index) => (
        <span
          data-index={index}
          class:list={[
            "dot inline-block h-3 w-3 rounded-full bg-neutral-700 transition-colors cursor-pointer",
            index === 0 ? "active-dot" : "",
          ]}
        />
      ))
    }
  </div>

  <button
    class="absolute top-1/2 -translate-y-full rounded-r-full bg-neutral-800 p-2 pl-0 hover:text-zelena"
    id="prev-slide"><Icon name="bi:chevron-left" size={30} /></button
  >
  <button
    class="absolute right-0 top-1/2 -translate-y-full rounded-l-full bg-neutral-800 p-2 pr-0 hover:text-zelena"
    id="next-slide"><Icon name="bi:chevron-right" size={30} /></button
  >
</div>

<style>
  .active-dot {
    background-color: theme("colors.neutral.400") !important;
  }

  .active-slide {
    display: block !important;
  }

  .fade {
    animation-name: fade;
    animation-duration: 1.5s;
  }

  @keyframes fade {
    from {
      opacity: 0;
    }
    to {
      opacity: 1;
    }
  }
</style>

<script>
  let slideIndex = 0;
  const slides: NodeListOf<HTMLElement> =
    document.querySelectorAll(".mySlides")!;
  const dots: NodeListOf<HTMLElement> = document.querySelectorAll(".dot")!;
  const nextBtn: HTMLButtonElement = document.querySelector("#next-slide")!;
  const prevBtn: HTMLButtonElement = document.querySelector("#prev-slide")!;

  prevBtn.addEventListener("click", () => {
    nextSlide({ dir: "down" });
  });

  nextBtn.addEventListener("click", () => {
    nextSlide({ dir: "up" });
  });

  function nextSlide(opts: { dir?: "up" | "down"; index?: number }) {
    slides[slideIndex].classList.toggle("active-slide");
    dots[slideIndex].classList.toggle("active-dot");

    if (opts.dir === "up") slideIndex++;
    else if (opts.dir === "down") slideIndex--;
    else {
      if (opts.index !== undefined) slideIndex = opts.index;
    }

    if (slideIndex >= slides.length) {
      slideIndex = 0;
    }

    if (slideIndex < 0) {
      slideIndex = slides.length - 1;
    }

    slides[slideIndex].classList.toggle("active-slide");
    dots[slideIndex].classList.toggle("active-dot");
  }

  dots.forEach((d) => {
    d.addEventListener("click", (event) => {
      // @ts-ignore
      nextSlide({ index: event.currentTarget.dataset.index });
    });
  });
</script>

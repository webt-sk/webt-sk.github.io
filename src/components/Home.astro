---
import { Icon } from "astro-icon";

export interface Props {
  heading: string;
  description2: string;
  freeWeb: string;
  scrollDown: string;
  ourServices: string;
  whatDoWeOffer: string;
  whatDoWeOfferDesc: string;
  cards: {
    heading: string;
    description: string;
    services: string[];
  }[];
}

const props = Astro.props;
---

<main class="w-full text-center lg:text-left">
  <section class="flex min-h-screen flex-col pt-24 lg:justify-center lg:pt-0">
    <div>
      <h1
        class="mb-8 mt-6 inline-block bg-gradient-to-br from-zelena to-ruzova bg-clip-text text-5xl font-bold text-transparent md:mb-10 lg:mt-0 xl:text-8xl"
      >
        {props.heading}
      </h1>
      <p class="mb-4 text-xl xl:text-4xl">
        <slot name="description" />
      </p>
      <p class="mb-10 text-xl italic text-zelena xl:text-2xl">
        {props.description2}
      </p>
      <div class="flex justify-center gap-2 md:gap-4 lg:justify-start">
        <a
          href=""
          class="flex w-fit items-center gap-4 rounded-xl border-2 border-transparent bg-ruzova px-3 py-2 duration-300 hover:border-ruzova hover:bg-transparent md:px-5"
          ><div>
            <span class="block font-bold">{props.freeWeb}</span><span
              class="-mt-1 block text-sm">{props.scrollDown}</span
            >
          </div><Icon
            name="ic:outline-keyboard-double-arrow-down"
            size={35}
          /></a
        >

        <a
          href=""
          class="flex w-fit items-center rounded-xl border-2 border-ruzova px-3 pb-3 pt-2 font-bold transition-colors duration-300 hover:bg-ruzova md:px-5"
          >{props.ourServices}</a
        >
      </div>
    </div>
  </section>
  <section>
    <h2 class="mb-2 text-xl italic text-zelena">{props.whatDoWeOffer}</h2>
    <p
      class="mx-auto mb-12 max-w-md text-xl font-bold tracking-wide lg:mx-0 lg:max-w-2xl xl:max-w-3xl xl:text-2xl"
    >
      {props.whatDoWeOfferDesc}
    </p>
    <div
      class="flex flex-wrap justify-center gap-5 py-5 md:flex-nowrap md:justify-between md:pb-72"
    >
      <div
        class="relative z-10 max-w-md rounded-3xl bg-zinc-700 md:translate-y-1/4"
      >
        <div class="card">
          <div class="relative z-10">
            <h3 class="mb-2 text-3xl font-bold text-ruzova">
              {props.cards[0].heading}
            </h3>
            <p class="mb-6 text-lg font-bold">
              {props.cards[0].description}
            </p>
            <ul class="leading-7 text-zinc-200">
              {props.cards[0].services.map((s) => <li>{s}</li>)}
            </ul>
          </div>
        </div>
      </div>
      <div class="relative z-10 max-w-md rounded-3xl bg-zinc-700">
        <div class="card">
          <div class="relative z-10">
            <h3 class="mb-2 text-3xl font-bold text-ruzova">
              {props.cards[1].heading}
            </h3>
            <p class="mb-6 text-lg font-bold">
              {props.cards[1].description}
            </p>
            <ul class="leading-7 text-zinc-200">
              {props.cards[1].services.map((s) => <li>{s}</li>)}
            </ul>
          </div>
        </div>
      </div>
      <div
        class="relative z-10 max-w-md rounded-3xl bg-zinc-700 md:translate-y-1/2"
      >
        <div class="card">
          <div class="relative z-10">
            <h3 class="mb-2 text-3xl font-bold text-ruzova">
              {props.cards[2].heading}
            </h3>
            <p class="mb-6 text-lg font-bold">
              {props.cards[2].description}
            </p>
            <ul class="leading-7 text-zinc-200">
              {props.cards[2].services.map((s) => <li>{s}</li>)}
            </ul>
          </div>
        </div>
      </div>
    </div>
  </section>
</main>

<style>
  .card {
    @apply relative rounded-3xl bg-zinc-900 p-10 text-left;
    height: calc(100% - 2px);
    width: calc(100% - 2px);
    top: 1px;
    left: 1px;
  }

  /* prettier-ignore */
  .card::before {
    content: "";
    height: 100%;
    width: 100%;
    top: 0;
    left: 0;
    position: absolute;
    background: radial-gradient(
      600px circle at var(--mouse-x) var(--mouse-y),
      theme("colors.ruzova")23,
      transparent 50%
    );
    border-radius: inherit;
    z-index: 1;
    opacity: 0;
    transition: opacity 400ms;
  }

  .card:hover::before,
  .card:hover::after {
    opacity: 1;
  }

  .card::after {
    content: "";
    height: calc(100% + 2px);
    width: calc(100% + 2px);
    border-radius: inherit;
    background-color: theme(colors.zinc.600);
    position: absolute;
    top: -1px;
    left: -1px;
    z-index: -1;
  }

  .card::after {
    background: radial-gradient(
      500px circle at var(--mouse-x) var(--mouse-y),
      theme("colors.zinc.400"),
      transparent 40%
    );
    opacity: 0;
    transition: opacity 400ms;
  }
</style>

<script>
  for (const card of document.querySelectorAll<HTMLElement>(".card")) {
    card.onmousemove = (event) => {
      const target: any = event.currentTarget!;
      const rect = target.getBoundingClientRect();
      const x = event.clientX - rect.left;
      const y = event.clientY - rect.top;

      target.style.setProperty("--mouse-x", `${x}px`);
      target.style.setProperty("--mouse-y", `${y}px`);
    };
  }
</script>

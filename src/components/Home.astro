---
import { Icon } from "astro-icon";
import ThreeDee from "./ThreeDee.astro";
export interface Props {
  heading: string;
  description: string;
  freeWeb: string;
  scrollDown: string;
  ourServices: string;
  whatDoWeOffer: string;
  whatDoWeOfferDesc: string;
  cards: {
    heading: string;
    description: string;
    services: string[];
  }[];
  freeWebHeading: string;
  freeWebChance: string;
  freeWebIWant: string;
  freeWebHowTo: string;
  freeWebNeedIg: string;
  freeWebCount: string;
  freeWebCountFrom: string;
  freeWebConditions: string;
  freeWebDownload: string;
}

const props = Astro.props;
---

<main class="w-full scroll-smooth text-center lg:text-left">
  <section
    class="grid min-h-screen grid-cols-1 place-items-center pt-24 lg:grid-cols-2 lg:pt-0"
  >
    <div>
      <h1
        class="mb-8 mt-6 inline-block bg-gradient-to-br from-zelena to-ruzova bg-clip-text text-5xl font-bold text-transparent md:mb-10 lg:mt-0 xl:text-8xl"
      >
        {props.heading}
      </h1>
      <p class="mb-4 text-xl xl:text-4xl">
        <slot name="description" />
      </p>
      <p class="mb-10 text-xl italic text-zelena xl:text-2xl">
        {props.description}
      </p>
      <div class="flex justify-center gap-2 md:gap-4 lg:justify-start">
        <a
          href="#free-web"
          class="flex w-fit items-center gap-4 rounded-xl border-2 border-transparent bg-ruzova px-3 py-2 duration-300 hover:border-ruzova hover:bg-transparent md:px-5"
          ><div>
            <span class="block font-bold">{props.freeWeb}</span><span
              class="-mt-1 block text-sm">{props.scrollDown}</span
            >
          </div><Icon
            name="ic:outline-keyboard-double-arrow-down"
            size={35}
          /></a
        >

        <a
          href=""
          class="flex w-fit items-center rounded-xl border-2 border-ruzova px-3 pb-3 pt-2 font-bold transition-colors duration-300 hover:bg-ruzova md:px-5"
          >{props.ourServices}</a
        >
      </div>
    </div>
    <ThreeDee
      models={[
        {
          href: "/models/astronaut.glb",
          position: [0, -1, 0],
          rotation: [0, 0, 0],
          animationEnabled: false,
        },
      ]}
      camera={{ position: [0, 1, 6] }}
      light={{ position: [0, 1, 1] }}
      mouseMove={true}
    />
  </section>
  <section class="mb-12">
    <h2 class="mb-2 text-xl italic text-zelena">{props.whatDoWeOffer}</h2>
    <p
      class="mx-auto mb-12 max-w-md text-xl font-bold tracking-wide lg:mx-0 lg:max-w-2xl xl:max-w-3xl xl:text-2xl"
    >
      {props.whatDoWeOfferDesc}
    </p>
    <div
      class="flex flex-wrap justify-center gap-5 py-5 md:flex-nowrap md:justify-between md:pb-72"
    >
      <div
        class="relative z-10 max-w-md rounded-3xl bg-zinc-700 md:translate-y-1/4"
      >
        <div class="card">
          <div class="relative z-10">
            <h3 class="mb-2 text-3xl font-bold text-ruzova">
              {props.cards[0].heading}
            </h3>
            <p class="mb-6 text-lg font-bold">
              {props.cards[0].description}
            </p>
            <ul class="leading-7 text-zinc-200">
              {props.cards[0].services.map((s) => <li>{s}</li>)}
            </ul>
          </div>
        </div>
      </div>
      <div class="relative z-10 max-w-md rounded-3xl bg-zinc-700">
        <div class="card">
          <div class="relative z-10">
            <h3 class="mb-2 text-3xl font-bold text-ruzova">
              {props.cards[1].heading}
            </h3>
            <p class="mb-6 text-lg font-bold">
              {props.cards[1].description}
            </p>
            <ul class="leading-7 text-zinc-200">
              {props.cards[1].services.map((s) => <li>{s}</li>)}
            </ul>
          </div>
        </div>
      </div>
      <div
        class="relative z-10 max-w-md rounded-3xl bg-zinc-700 md:translate-y-1/2"
      >
        <div class="card">
          <div class="relative z-10">
            <h3 class="mb-2 text-3xl font-bold text-ruzova">
              {props.cards[2].heading}
            </h3>
            <p class="mb-6 text-lg font-bold">
              {props.cards[2].description}
            </p>
            <ul class="leading-7 text-zinc-200">
              {props.cards[2].services.map((s) => <li>{s}</li>)}
            </ul>
          </div>
        </div>
      </div>
    </div>
  </section>
  <section id="free-web" class="mx-auto mb-10 max-w-md pt-12 md:max-w-none">
    <div
      class="flex flex-wrap justify-center gap-12 md:flex-row-reverse md:flex-nowrap md:justify-between"
    >
      <div class="relative md:-translate-y-12 md:text-right">
        <h2 class="mb-2 text-2xl text-ruzova">{props.freeWebHeading}</h2>
        <p class="mb-4 font-bold">{props.freeWebChance}</p>
        <button class="rounded-xl bg-ruzova px-5 py-2 font-bold"
          >{props.freeWebIWant}</button
        >
      </div>
      <div class="md:text-left">
        <h3 class="mb-1 text-4xl font-bold text-ruzova">
          {props.freeWebHowTo}
        </h3>
        <p class="mb-4 text-xl italic text-zelena">{props.freeWebNeedIg}</p>
      </div>
    </div>
    <div slot="freeWebText" class="max-w-3xl md:text-left lg:text-xl">
      <slot name="freeWebText" />
    </div>
    <div class="mt-12 flex md:gap-14">
      <div class="text-left">
        <p class="mb-2 text-xl italic text-zelena">
          {props.freeWebCount}:
          <span class="relative left-1 top-1 text-4xl font-bold text-ruzova"
            >7</span
          >
        </p>
        <p>{props.freeWebCountFrom} 7</p>
      </div>
      <a
        href="/"
        class="flex flex-wrap justify-end gap-2 text-right md:items-center md:gap-3 md:text-left"
      >
        <div>
          <p class="text-xl italic text-zelena">{props.freeWebConditions}</p>
          <p>{props.freeWebDownload}</p>
        </div>
        <svg
          class="text-ruzova"
          xmlns="http://www.w3.org/2000/svg"
          width="32"
          height="32"
          viewBox="0 0 16 16"
        >
          <path
            fill="currentColor"
            fill-rule="evenodd"
            d="M14 4.5V14a2 2 0 0 1-2 2h-1v-1h1a1 1 0 0 0 1-1V4.5h-2A1.5 1.5 0 0 1 9.5 3V1H4a1 1 0 0 0-1 1v9H2V2a2 2 0 0 1 2-2h5.5L14 4.5ZM1.6 11.85H0v3.999h.791v-1.342h.803c.287 0 .531-.057.732-.173c.203-.117.358-.275.463-.474a1.42 1.42 0 0 0 .161-.677c0-.25-.053-.476-.158-.677a1.176 1.176 0 0 0-.46-.477c-.2-.12-.443-.179-.732-.179Zm.545 1.333a.795.795 0 0 1-.085.38a.574.574 0 0 1-.238.241a.794.794 0 0 1-.375.082H.788V12.48h.66c.218 0 .389.06.512.181c.123.122.185.296.185.522Zm1.217-1.333v3.999h1.46c.401 0 .734-.08.998-.237a1.45 1.45 0 0 0 .595-.689c.13-.3.196-.662.196-1.084c0-.42-.065-.778-.196-1.075a1.426 1.426 0 0 0-.589-.68c-.264-.156-.599-.234-1.005-.234H3.362Zm.791.645h.563c.248 0 .45.05.609.152a.89.89 0 0 1 .354.454c.079.201.118.452.118.753a2.3 2.3 0 0 1-.068.592a1.14 1.14 0 0 1-.196.422a.8.8 0 0 1-.334.252a1.298 1.298 0 0 1-.483.082h-.563v-2.707Zm3.743 1.763v1.591h-.79V11.85h2.548v.653H7.896v1.117h1.606v.638H7.896Z"
          ></path>
        </svg>
      </a>
    </div>
  </section>

  <style>
    .card {
      @apply relative rounded-3xl bg-zinc-900 p-10 text-left;
      height: calc(100% - 2px);
      width: calc(100% - 2px);
      top: 1px;
      left: 1px;
    }

    /* prettier-ignore */
    .card::before {
    content: "";
    height: 100%;
    width: 100%;
    top: 0;
    left: 0;
    position: absolute;
    background: radial-gradient(
      600px circle at var(--mouse-x) var(--mouse-y),
      theme("colors.ruzova")30,
      transparent 50%
    );
    border-radius: inherit;
    z-index: 1;
    opacity: 0;
    transition: opacity 400ms;
  }

    .card:hover::before,
    .card:hover::after {
      opacity: 1;
    }

    .card::after {
      content: "";
      height: calc(100% + 2px);
      width: calc(100% + 2px);
      border-radius: inherit;
      background-color: theme(colors.zinc.600);
      position: absolute;
      top: -1px;
      left: -1px;
      z-index: -1;
    }

    .card::after {
      background: radial-gradient(
        500px circle at var(--mouse-x) var(--mouse-y),
        theme("colors.zinc.400"),
        transparent 40%
      );
      opacity: 0;
      transition: opacity 400ms;
    }
  </style>
</main>

<script>
  for (const card of document.querySelectorAll<HTMLElement>(".card")) {
    card.onmousemove = (event) => {
      const target: any = event.currentTarget!;
      const rect = target.getBoundingClientRect();
      const x = event.clientX - rect.left;
      const y = event.clientY - rect.top;

      target.style.setProperty("--mouse-x", `${x}px`);
      target.style.setProperty("--mouse-y", `${y}px`);
    };
  }
</script>

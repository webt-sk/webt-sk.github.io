<main class="text-center lg:text-left">
  <section class="flex min-h-screen flex-col pt-24 lg:justify-center lg:pt-0">
    <div>
      <h1
        class="mb-4 inline-block bg-gradient-to-br from-zelena to-ruzova bg-clip-text text-5xl font-bold text-transparent xl:text-8xl"
      >
        Sme webTool
      </h1>
      <p class="mb-4 text-xl xl:text-4xl">
        Digitálna agentúra, ktorá Vás<br />
        ukáže svetu prostredníctvom webu
      </p>
      <p class="text-xl italic text-zelena xl:text-2xl">
        Vytvárame vaše web, eshopy či aplikácie
      </p>
    </div>
    <canvas id="three-dee-home" class="absolute left-0 top-0 -z-10"></canvas>
  </section>
</main>

<script>
  import * as THREE from "three";
  import { DRACOLoader } from "three/examples/jsm/loaders/DRACOLoader";
  import { GLTFLoader } from "three/examples/jsm/loaders/GLTFLoader";

  const STARS_COUNT = 800;
  const STARS_SPEED = 0.02;

  const STAR_MAX_X = 100;
  const STAR_MIN_X = -100;
  const STAR_MAX_Y = 45;
  const STAR_MIN_Y = -45;
  const STAR_MAX_Z = -50;
  const STAR_MIN_Z = -160;

  const MOUSE_SENSITIVITY = 0.00001;

  const canvas: HTMLCanvasElement = document.querySelector("#three-dee-home")!;
  const scene = new THREE.Scene();
  const camera = new THREE.PerspectiveCamera(50, canvas.width / canvas.height);
  const light = new THREE.PointLight(0xffffff, 1, 0, 2);
  const renderer = new THREE.WebGLRenderer({
    canvas: canvas,
    antialias: true,
  });
  scene.add(light);

  const starGeometry = new THREE.SphereGeometry(0.1, 16, 16);
  const starMaterials = [
    new THREE.MeshBasicMaterial({
      color: 0xffffff,
    }),
    new THREE.MeshBasicMaterial({
      color: 0xdeecfc,
    }),
    new THREE.MeshBasicMaterial({
      color: 0xd5dff2,
    }),
    new THREE.MeshBasicMaterial({
      color: 0xf4eede,
    }),
    new THREE.MeshBasicMaterial({
      color: 0xfcfbf7,
    }),
  ];

  const stars = Array<THREE.Mesh>(STARS_COUNT);

  for (let i = 0; i < STARS_COUNT; i++) {
    stars[i] = createStar();
  }

  function createStar() {
    const star = new THREE.Mesh(starGeometry);

    generateStarProps(star);

    scene.add(star);
    return star;
  }

  function generateStarProps(star: THREE.Mesh, forceMaxZ = 0) {
    const randomMaterial = Math.floor(Math.random() * starMaterials.length);
    star.material = starMaterials[randomMaterial];
    star.position.x = Math.random() * (STAR_MAX_X - STAR_MIN_X) + STAR_MIN_X;
    star.position.y = Math.random() * (STAR_MAX_Y - STAR_MIN_Y) + STAR_MIN_Y;
    star.position.z =
      Math.random() * (STAR_MAX_Z + forceMaxZ - STAR_MIN_Z) + STAR_MIN_Z;
  }

  function resize() {
    renderer.setSize(window.innerWidth, window.innerHeight);
    camera.aspect = canvas.width / canvas.height;
    camera.updateProjectionMatrix();
  }

  window.addEventListener("resize", resize);

  document.addEventListener("mousemove", (event) => {
    const deltaX = event.movementX || 0;
    const deltaY = event.movementY || 0;

    scene.rotation.y -= deltaX * MOUSE_SENSITIVITY;
    scene.rotation.x -= deltaY * MOUSE_SENSITIVITY;
  });

  function animate() {
    window.requestAnimationFrame(animate);

    for (let i = 0; i < STARS_COUNT; i++) {
      stars[i].position.z += STARS_SPEED;
      if (stars[i].position.z > STAR_MAX_Z) {
        generateStarProps(stars[i]);
      }
    }

    renderer.render(scene, camera);
  }

  resize();
  animate();
</script>
